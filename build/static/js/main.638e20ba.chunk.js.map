{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","email","i","react_default","a","createElement","className","alt","src","CardList","allRobo","robots","map","components_Card","key","SearchBox","searchChange","searchfield","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","console","log","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.638e20ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card=({name,id,email,i})=> {\r\n\t \r\n  return (\r\n    <div className='bg-light-green dib grow br4 pa3 ma2 bw2'>\r\n      <img alt='Robo' src= {'https://robohash.org/f' + id+'?200x100'}/>\r\n     <div>\r\n     <h2>{name}</h2>\r\n     <p>{email}</p></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=> {\r\n\t//if(true) throw new Error('messed up'); //to check if errorboundary is working or not\r\n\t const allRobo = robots.map((robots) =>\r\n  <Card key={robots.id} id={robots.id} name={robots.name}  email={robots.email}/>\r\n);\r\n  return (\r\n    <div >\r\n{allRobo}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\nconst SearchBox=({searchChange,searchfield})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search'\r\n\tplaceholder='search robots' \r\n\tonChange={searchChange}/></div>);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll',border:'5px solid white',height:'800px'}}>{props.children}</div>);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n      super(props);\r\n      this.state={hasError:false}\r\n       }\r\n  componentDidCatch(error,info){\r\n  \tthis.setState({hasError:true});\r\n  }\r\n    render(){\r\n\r\n    if(this.state.hasError){return <h1>Ooops thats not good</h1>;}\r\n\t\r\n\treturn this.props.children;\r\n} }\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nclass Header extends Component {\r\n\tshouldComponentUpdate(nextProps,nextState){\r\n\t\t\treturn false;\r\n\t\t}\r\n\trender(){\r\n\t\tconsole.log('Header');\r\n\r\n\t\treturn(\r\n        <h1 className='f1'>RoboFriends</h1>);\r\n    }\r\n\t\r\n}\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n      <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_FAILED} from './constants';\r\nexport const setSearchField=(text)=>({\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload:text\r\n})\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\t fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response=>response.json())\r\n  .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n  .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n  \r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\texport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';//because this is a promise it has 3 state \r\n\texport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\n\texport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_FAILED} from './constants';\r\n\r\n\r\n const initialStateSearch={\r\n\t'searchField':''\r\n}\r\n//1st searchrobots reducer\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{searchField:action.payload});\r\n\t\t//return {...state,{searchField:action.payload}} //cleaner way\r\n\t\tdefault :\r\n\t\treturn state;\r\n\t}\r\n\t}\r\n\t const initialStateRobots={\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({},state,{isPending:true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({},state,{robots:action.payload,isPending:false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({},state,{error:action.payload,isPending:false});\r\n\t\t\r\n\t\t//return {...state,{searchField:action.payload}} //cleaner way\r\n\t\tdefault :\r\n\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots,requestRobots} from './reducers';\nimport * as serviceWorker from './serviceWorker';\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots});\nconst store=\ncreateStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n\t<Provider store={store}>\n\t<App />\n\t</Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}