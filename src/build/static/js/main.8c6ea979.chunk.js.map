{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","id","email","i","react_default","a","createElement","className","alt","src","CardList","allRobo","robots","map","components_Card","key","SearchBox","searchChange","searchfield","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAeeA,SAZJ,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAKC,EAAeF,EAAfE,GAAGC,EAAYH,EAAZG,MAAYH,EAANI,EAEzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAM,yBAA2BR,EAAG,aACrDG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIJ,OCMMQ,EAXA,SAAAX,GAAa,IACpBY,EADoBZ,EAAXa,OACQC,IAAI,SAACD,GAAD,OAC3BR,EAAAC,EAAAC,cAACQ,EAAD,CAAMC,IAAKH,EAAOX,GAAIA,GAAIW,EAAOX,GAAID,KAAMY,EAAOZ,KAAOE,MAAOU,EAAOV,UAEvE,OACEE,EAAAC,EAAAC,cAAA,WACHK,ICDcK,EATC,SAAAjB,GAA8B,IAA5BkB,EAA4BlB,EAA5BkB,aAA4BlB,EAAfmB,YAC9B,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACOC,UAAU,mCACjBY,KAAK,SACNC,YAAY,gBACZC,SAAUJ,MCHIK,EAJF,SAACC,GACb,OACCnB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAAWJ,EAAMK,WC8CpEC,cAvCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,eAAe,SAACC,GACpBR,EAAKS,SAAS,CAACrB,YAAYoB,EAAME,OAAOC,SAblCX,EAAKY,MAAM,CACf9B,OAAO,GACPM,YAAY,IAJCY,mFAOI,IAAAa,EAAAV,KACjBW,MAAM,8CACLC,KAAK,SAAAC,GAAW,OAAOA,EAASC,SAChCF,KAAK,SAAAG,GAAQL,EAAKJ,SAAS,CAAC3B,OAAOoC,uCAS3B,IAAAC,EACoBhB,KAAKS,MAAzB9B,EADAqC,EACArC,OAAOM,EADP+B,EACO/B,YACZgC,EAAetC,EAAOuC,OAAO,SAAAC,GACjC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASpC,EAAYmC,iBAEvD,OAAQzC,EAAO2C,OAIdnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAWvC,aAAcgB,KAAKI,iBAC9BjC,EAAAC,EAAAC,cAACmD,EAAD,KACCrD,EAAAC,EAAAC,cAACoD,EAAD,CAAU9C,OAAQsC,MAPrB9C,EAAAC,EAAAC,cAAA,4BA1BkBqD,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.8c6ea979.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card=({name,id,email,i})=> {\r\n\t \r\n  return (\r\n    <div className='bg-light-green dib grow br4 pa3 ma2 bw2'>\r\n      <img alt='Robo' src= {'https://robohash.org/f' + id+'?200x100'}/>\r\n     <div>\r\n     <h2>{name}</h2>\r\n     <p>{email}</p></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=> {\r\n\t const allRobo = robots.map((robots) =>\r\n  <Card key={robots.id} id={robots.id} name={robots.name}  email={robots.email}/>\r\n);\r\n  return (\r\n    <div >\r\n{allRobo}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\nconst SearchBox=({searchChange,searchfield})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search'\r\n\tplaceholder='search robots' \r\n\tonChange={searchChange}/></div>);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll',border:'5px solid white',height:'800px'}}>{props.children}</div>);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n\nimport Scroll from '../components/Scroll';\n\n\n\nclass App extends Component{\n  constructor(){\n      super();\n      this.state={\n  robots:[],\n  searchfield:''\n}\n    }\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=>{return response.json();})\n  .then(users=>{this.setState({robots:users})\n  });\n\n}\n    onSearchChange=(event)=>{\nthis.setState({searchfield:event.target.value})\n\n\n    }\n  render() {\n    const {robots,searchfield}=this.state;\nconst filteredRobots=robots.filter(robot=>{\n  return robot.name.toLowerCase().includes(searchfield.toLowerCase());//only include the robot which is in search field\n});\nreturn !robots.length?  \n<h1>Loading</h1>:\n\n  \n <div className=\"App\">\n  <h1 className=\"f2\">RoboFriends</h1>\n  <SearchBox searchChange={this.onSearchChange} />\n  <Scroll>\n   <CardList robots={filteredRobots}/>\n   </Scroll>\n    </div>\n  \n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}